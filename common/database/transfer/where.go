// Code generated by entc, DO NOT EDIT.

package transfer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/naturalselectionlabs/pregod/common/database/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// TransactionHash applies equality check predicate on the "transaction_hash" field. It's identical to TransactionHashEQ.
func TransactionHash(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionHash), v))
	})
}

// TransactionLogIndex applies equality check predicate on the "transaction_log_index" field. It's identical to TransactionLogIndexEQ.
func TransactionLogIndex(v int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionLogIndex), v))
	})
}

// AddressFrom applies equality check predicate on the "address_from" field. It's identical to AddressFromEQ.
func AddressFrom(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddressFrom), v))
	})
}

// AddressTo applies equality check predicate on the "address_to" field. It's identical to AddressToEQ.
func AddressTo(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddressTo), v))
	})
}

// TokenAddress applies equality check predicate on the "token_address" field. It's identical to TokenAddressEQ.
func TokenAddress(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenAddress), v))
	})
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// TransactionHashEQ applies the EQ predicate on the "transaction_hash" field.
func TransactionHashEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashNEQ applies the NEQ predicate on the "transaction_hash" field.
func TransactionHashNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashIn applies the In predicate on the "transaction_hash" field.
func TransactionHashIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionHash), v...))
	})
}

// TransactionHashNotIn applies the NotIn predicate on the "transaction_hash" field.
func TransactionHashNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionHash), v...))
	})
}

// TransactionHashGT applies the GT predicate on the "transaction_hash" field.
func TransactionHashGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashGTE applies the GTE predicate on the "transaction_hash" field.
func TransactionHashGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashLT applies the LT predicate on the "transaction_hash" field.
func TransactionHashLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashLTE applies the LTE predicate on the "transaction_hash" field.
func TransactionHashLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashContains applies the Contains predicate on the "transaction_hash" field.
func TransactionHashContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashHasPrefix applies the HasPrefix predicate on the "transaction_hash" field.
func TransactionHashHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashHasSuffix applies the HasSuffix predicate on the "transaction_hash" field.
func TransactionHashHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashEqualFold applies the EqualFold predicate on the "transaction_hash" field.
func TransactionHashEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionHash), v))
	})
}

// TransactionHashContainsFold applies the ContainsFold predicate on the "transaction_hash" field.
func TransactionHashContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionHash), v))
	})
}

// TransactionLogIndexEQ applies the EQ predicate on the "transaction_log_index" field.
func TransactionLogIndexEQ(v int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionLogIndex), v))
	})
}

// TransactionLogIndexNEQ applies the NEQ predicate on the "transaction_log_index" field.
func TransactionLogIndexNEQ(v int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionLogIndex), v))
	})
}

// TransactionLogIndexIn applies the In predicate on the "transaction_log_index" field.
func TransactionLogIndexIn(vs ...int) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionLogIndex), v...))
	})
}

// TransactionLogIndexNotIn applies the NotIn predicate on the "transaction_log_index" field.
func TransactionLogIndexNotIn(vs ...int) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionLogIndex), v...))
	})
}

// TransactionLogIndexGT applies the GT predicate on the "transaction_log_index" field.
func TransactionLogIndexGT(v int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionLogIndex), v))
	})
}

// TransactionLogIndexGTE applies the GTE predicate on the "transaction_log_index" field.
func TransactionLogIndexGTE(v int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionLogIndex), v))
	})
}

// TransactionLogIndexLT applies the LT predicate on the "transaction_log_index" field.
func TransactionLogIndexLT(v int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionLogIndex), v))
	})
}

// TransactionLogIndexLTE applies the LTE predicate on the "transaction_log_index" field.
func TransactionLogIndexLTE(v int) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionLogIndex), v))
	})
}

// AddressFromEQ applies the EQ predicate on the "address_from" field.
func AddressFromEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddressFrom), v))
	})
}

// AddressFromNEQ applies the NEQ predicate on the "address_from" field.
func AddressFromNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddressFrom), v))
	})
}

// AddressFromIn applies the In predicate on the "address_from" field.
func AddressFromIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddressFrom), v...))
	})
}

// AddressFromNotIn applies the NotIn predicate on the "address_from" field.
func AddressFromNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddressFrom), v...))
	})
}

// AddressFromGT applies the GT predicate on the "address_from" field.
func AddressFromGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddressFrom), v))
	})
}

// AddressFromGTE applies the GTE predicate on the "address_from" field.
func AddressFromGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddressFrom), v))
	})
}

// AddressFromLT applies the LT predicate on the "address_from" field.
func AddressFromLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddressFrom), v))
	})
}

// AddressFromLTE applies the LTE predicate on the "address_from" field.
func AddressFromLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddressFrom), v))
	})
}

// AddressFromContains applies the Contains predicate on the "address_from" field.
func AddressFromContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddressFrom), v))
	})
}

// AddressFromHasPrefix applies the HasPrefix predicate on the "address_from" field.
func AddressFromHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddressFrom), v))
	})
}

// AddressFromHasSuffix applies the HasSuffix predicate on the "address_from" field.
func AddressFromHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddressFrom), v))
	})
}

// AddressFromEqualFold applies the EqualFold predicate on the "address_from" field.
func AddressFromEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddressFrom), v))
	})
}

// AddressFromContainsFold applies the ContainsFold predicate on the "address_from" field.
func AddressFromContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddressFrom), v))
	})
}

// AddressToEQ applies the EQ predicate on the "address_to" field.
func AddressToEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddressTo), v))
	})
}

// AddressToNEQ applies the NEQ predicate on the "address_to" field.
func AddressToNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddressTo), v))
	})
}

// AddressToIn applies the In predicate on the "address_to" field.
func AddressToIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddressTo), v...))
	})
}

// AddressToNotIn applies the NotIn predicate on the "address_to" field.
func AddressToNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddressTo), v...))
	})
}

// AddressToGT applies the GT predicate on the "address_to" field.
func AddressToGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddressTo), v))
	})
}

// AddressToGTE applies the GTE predicate on the "address_to" field.
func AddressToGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddressTo), v))
	})
}

// AddressToLT applies the LT predicate on the "address_to" field.
func AddressToLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddressTo), v))
	})
}

// AddressToLTE applies the LTE predicate on the "address_to" field.
func AddressToLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddressTo), v))
	})
}

// AddressToContains applies the Contains predicate on the "address_to" field.
func AddressToContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddressTo), v))
	})
}

// AddressToHasPrefix applies the HasPrefix predicate on the "address_to" field.
func AddressToHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddressTo), v))
	})
}

// AddressToHasSuffix applies the HasSuffix predicate on the "address_to" field.
func AddressToHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddressTo), v))
	})
}

// AddressToEqualFold applies the EqualFold predicate on the "address_to" field.
func AddressToEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddressTo), v))
	})
}

// AddressToContainsFold applies the ContainsFold predicate on the "address_to" field.
func AddressToContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddressTo), v))
	})
}

// TokenAddressEQ applies the EQ predicate on the "token_address" field.
func TokenAddressEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressNEQ applies the NEQ predicate on the "token_address" field.
func TokenAddressNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressIn applies the In predicate on the "token_address" field.
func TokenAddressIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTokenAddress), v...))
	})
}

// TokenAddressNotIn applies the NotIn predicate on the "token_address" field.
func TokenAddressNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTokenAddress), v...))
	})
}

// TokenAddressGT applies the GT predicate on the "token_address" field.
func TokenAddressGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressGTE applies the GTE predicate on the "token_address" field.
func TokenAddressGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressLT applies the LT predicate on the "token_address" field.
func TokenAddressLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressLTE applies the LTE predicate on the "token_address" field.
func TokenAddressLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressContains applies the Contains predicate on the "token_address" field.
func TokenAddressContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressHasPrefix applies the HasPrefix predicate on the "token_address" field.
func TokenAddressHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressHasSuffix applies the HasSuffix predicate on the "token_address" field.
func TokenAddressHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressEqualFold applies the EqualFold predicate on the "token_address" field.
func TokenAddressEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTokenAddress), v))
	})
}

// TokenAddressContainsFold applies the ContainsFold predicate on the "token_address" field.
func TokenAddressContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTokenAddress), v))
	})
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenID), v))
	})
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenID), v))
	})
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTokenID), v...))
	})
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...string) predicate.Transfer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transfer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTokenID), v...))
	})
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenID), v))
	})
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenID), v))
	})
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenID), v))
	})
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenID), v))
	})
}

// TokenIDContains applies the Contains predicate on the "token_id" field.
func TokenIDContains(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTokenID), v))
	})
}

// TokenIDHasPrefix applies the HasPrefix predicate on the "token_id" field.
func TokenIDHasPrefix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTokenID), v))
	})
}

// TokenIDHasSuffix applies the HasSuffix predicate on the "token_id" field.
func TokenIDHasSuffix(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTokenID), v))
	})
}

// TokenIDEqualFold applies the EqualFold predicate on the "token_id" field.
func TokenIDEqualFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTokenID), v))
	})
}

// TokenIDContainsFold applies the ContainsFold predicate on the "token_id" field.
func TokenIDContainsFold(v string) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTokenID), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transfer) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transfer) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transfer) predicate.Transfer {
	return predicate.Transfer(func(s *sql.Selector) {
		p(s.Not())
	})
}
