// Code generated by entc, DO NOT EDIT.

package database

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/naturalselectionlabs/pregod/common/database/transfer"
)

// Transfer is the model entity for the Transfer schema.
type Transfer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TransactionHash holds the value of the "transaction_hash" field.
	TransactionHash string `json:"transaction_hash,omitempty"`
	// TransactionLogIndex holds the value of the "transaction_log_index" field.
	TransactionLogIndex int `json:"transaction_log_index,omitempty"`
	// AddressFrom holds the value of the "address_from" field.
	AddressFrom string `json:"address_from,omitempty"`
	// AddressTo holds the value of the "address_to" field.
	AddressTo string `json:"address_to,omitempty"`
	// TokenAddress holds the value of the "token_address" field.
	TokenAddress string `json:"token_address,omitempty"`
	// TokenID holds the value of the "token_id" field.
	TokenID string `json:"token_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transfer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case transfer.FieldID, transfer.FieldTransactionLogIndex:
			values[i] = new(sql.NullInt64)
		case transfer.FieldTransactionHash, transfer.FieldAddressFrom, transfer.FieldAddressTo, transfer.FieldTokenAddress, transfer.FieldTokenID:
			values[i] = new(sql.NullString)
		case transfer.FieldCreatedAt, transfer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transfer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transfer fields.
func (t *Transfer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transfer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transfer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transfer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case transfer.FieldTransactionHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_hash", values[i])
			} else if value.Valid {
				t.TransactionHash = value.String
			}
		case transfer.FieldTransactionLogIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_log_index", values[i])
			} else if value.Valid {
				t.TransactionLogIndex = int(value.Int64)
			}
		case transfer.FieldAddressFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_from", values[i])
			} else if value.Valid {
				t.AddressFrom = value.String
			}
		case transfer.FieldAddressTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_to", values[i])
			} else if value.Valid {
				t.AddressTo = value.String
			}
		case transfer.FieldTokenAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_address", values[i])
			} else if value.Valid {
				t.TokenAddress = value.String
			}
		case transfer.FieldTokenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_id", values[i])
			} else if value.Valid {
				t.TokenID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Transfer.
// Note that you need to call Transfer.Unwrap() before calling this method if this Transfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transfer) Update() *TransferUpdateOne {
	return (&TransferClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transfer) Unwrap() *Transfer {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("database: Transfer is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transfer) String() string {
	var builder strings.Builder
	builder.WriteString("Transfer(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", transaction_hash=")
	builder.WriteString(t.TransactionHash)
	builder.WriteString(", transaction_log_index=")
	builder.WriteString(fmt.Sprintf("%v", t.TransactionLogIndex))
	builder.WriteString(", address_from=")
	builder.WriteString(t.AddressFrom)
	builder.WriteString(", address_to=")
	builder.WriteString(t.AddressTo)
	builder.WriteString(", token_address=")
	builder.WriteString(t.TokenAddress)
	builder.WriteString(", token_id=")
	builder.WriteString(t.TokenID)
	builder.WriteByte(')')
	return builder.String()
}

// Transfers is a parsable slice of Transfer.
type Transfers []*Transfer

func (t Transfers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
